AutoTidy MVP - Product Requirements Document (PRD)
Version: 1.0 (Python/PyQt Stack)
Date: April 15, 2025

1. Introduction & Goals

Product Name: AutoTidy

Purpose: AutoTidy solves the problem of cluttered folders (like Desktop, Downloads, Screenshots) prone to accumulating temporary or old files. It automates the process of organizing these folders.

MVP Goals:

Enable users to select specific folders for monitoring.

Allow users to define rules (based on file age and filename patterns) for identifying files to be moved.

Automatically move identified files into a structured, dated subdirectory (_Cleanup/YYYY-MM-DD) within the monitored folder.

Validate user interest and core functionality usefulness, measured by adoption and retention.

2. Target Audience

Primary users are individuals using Windows or Linux desktops who experience clutter in frequently used directories (e.g., Downloads, Desktop) and prefer an automated solution over continuous manual cleaning. This includes users who download frequently, take many screenshots, or simply value a tidy digital workspace without constant effort.

3. User Stories

Primary Story: "As a user with a cluttered Downloads folder, I want to configure AutoTidy to monitor it and automatically move files older than a set time (e.g., 1 day) or matching a specific pattern (e.g., screenshot*.png) into dated subfolders (_Cleanup/YYYY-MM-DD), so that my Downloads folder stays clean and I can still find older files easily organised by date."

4. Features & Requirements

Core Features (Must-Have for MVP):

Folder Monitoring Setup: Users can add one or more local folders to be monitored by the application.

Rule Definition: For each monitored folder, users can configure rules:

File Age Threshold: Specify minimum age (e.g., 24 hours, 7 days) for a file to be considered for moving.

Filename Pattern Matching: Specify a filename pattern (e.g., screenshot*.png, *.tmp) to identify files for moving. (Assumed logic: move if either age or pattern matches).

Automated File Organization: The application automatically moves files matching the defined rules into a dedicated subdirectory named _Cleanup/YYYY-MM-DD (relative to the monitored folder).

Background Operation: The application runs in the background, ideally starting on system startup, and periodically checks monitored folders based on their rules.

Basic Status & Control: Provide a simple interface to view monitored folders, their configured rules, basic status (running/stopped), and a log of recent activity/errors. Include controls to start/stop the monitoring service.

UI/UX Concept:

Minimalist application residing primarily in the system tray (Windows) or menu bar area (Linux equivalent), managed via PyQt/PySide.

Clicking the tray icon opens a small configuration window built with PyQt/PySide widgets.

The window includes: an 'Add Folder' button, a list view widget (QListWidget or QTableView) displaying monitored folders/rules, input fields (QLineEdit, QSpinBox/QComboBox) for rules, a status/log display area (QTextEdit or similar), and Start/Stop controls (QPushButton).

Right-clicking the tray icon (QSystemTrayIcon) provides a context menu (QMenu) for: Add Folder, Start/Stop App, Quit App.

Aim for a clean and simple interface using standard PyQt/PySide widgets. Achieving a highly "modern" look might require additional effort using Qt Style Sheets (QSS).

5. Out of Scope for MVP

File previews within the application.

User configuration of the archive subfolder structure (fixed as _Cleanup/YYYY-MM-DD).

User accounts, settings synchronization, or any cloud features.

Complex rule combinations (e.g., rules requiring multiple conditions like age AND pattern AND size).

Moving files to locations outside the monitored folder's hierarchy (e.g., different drives, network locations).

Advanced scheduling options.

Undo functionality for moved files.

Detailed notification system (only critical errors might use pop-ups).

6. Success Metrics

Adoption Rate: Track the number/percentage of installations where at least one folder is successfully configured for monitoring.

Retention Rate: Track the percentage of users who keep the application installed and active (running in the background) over a defined period (e.g., 1 week, 1 month).